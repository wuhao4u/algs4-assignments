See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (7 warnings)
Checkstyle:   FAILED (10 warnings)

Correctness:  14/41 tests passed
Memory:       1/1 tests passed
Timing:       17/41 tests passed

Aggregate score: 48.78%
[Compilation: 5%, API: 5%, Findbugs: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.4K Jun 13 00:53 BruteCollinearPoints.java
6.4K Jun 13 00:53 FastCollinearPoints.java
4.5K Jun 13 00:53 Point.java


********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: Points from a file
  * filename = input8.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10000, 0) -> (7000, 3000)
    - reference segment 0: (10000, 0) -> (7000, 3000) -> (3000, 7000) -> (0, 10000)

    - student   solution has 2 non-null entries
    - reference solution has 2 non-null entries
    - 2 extra entries in student solution, including: (20000, 21000) -> (6000, 7000)
    - 2 missing entries in student solution, including: (3000, 4000) -> (6000, 7000) -> (14000, 15000) -> (20000, 21000)


  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (10000, 0) -> (13000, 0)
    - reference segment 3: (10000, 0) -> (13000, 0) -> (20000, 0) -> (30000, 0)

    - student   solution has 4 non-null entries
    - reference solution has 4 non-null entries
    - 3 extra entries in student solution, including: (10000, 20000) -> (20000, 10000)
    - 3 missing entries in student solution, including: (30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)


  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1000, 17000) -> (1000, 28000)
    - reference segment 3: (1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)

    - student   solution has 4 non-null entries
    - reference solution has 4 non-null entries
    - 4 extra entries in student solution, including: (28000, 29000) -> (4000, 29000)
    - 4 missing entries in student solution, including: (2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)


  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (24000, 23000) -> (3000, 23000)
    - reference segment 0: (1000, 23000) -> (3000, 23000) -> (18000, 23000) -> (24000, 23000)

    - student   solution has 6 non-null entries
    - reference solution has 6 non-null entries
    - 6 extra entries in student solution, including: (9000, 26000) -> (1000, 26000)
    - 6 missing entries in student solution, including: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)


==> FAILED

Test 2a: Points from a file with horizontal line segments
  * filename = horizontal5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (7453, 14118) -> (5067, 14118)
    - reference segment 4: (2682, 14118) -> (5067, 14118) -> (7453, 14118) -> (7821, 14118)

    - student   solution has 5 non-null entries
    - reference solution has 5 non-null entries
    - 4 extra entries in student solution, including: (7453, 14118) -> (5067, 14118)
    - 4 missing entries in student solution, including: (2682, 14118) -> (5067, 14118) -> (7453, 14118) -> (7821, 14118)


  * filename = horizontal25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (19459, 13870) -> (18005, 13870)
    - reference segment 13: (2566, 13870) -> (10653, 13870) -> (18005, 13870) -> (19459, 13870)

    - student   solution has 25 non-null entries
    - reference solution has 25 non-null entries
    - 22 extra entries in student solution, including: (16352, 20913) -> (8784, 20913)
    - 22 missing entries in student solution, including: (8784, 20913) -> (9880, 20913) -> (16352, 20913) -> (19666, 20913)


==> FAILED

Test 2b: Random horizontal line segments
  *  1 random horizontal line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10085, 1142) -> (11851, 1142)
    - reference segment 0: (10085, 1142) -> (11542, 1142) -> (11851, 1142) -> (18965, 1142)

    - student   solution has 1 non-null entries
    - reference solution has 1 non-null entries
    - 1 extra entry in student solution: (10085, 1142) -> (11851, 1142)
    - 1 missing entry in student solution: (10085, 1142) -> (11542, 1142) -> (11851, 1142) -> (18965, 1142)


    - failed on trial 1 of 500
     4
     10085  1142
     11542  1142
     18965  1142
     11851  1142

  *  5 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (5800, 13219) -> (3098, 13219)
    - reference segment 2: (3098, 13219) -> (5800, 13219) -> (6829, 13219) -> (13356, 13219)

    - student   solution has 5 non-null entries
    - reference solution has 5 non-null entries
    - 5 extra entries in student solution, including: (4853, 19395) -> (9022, 19395)
    - 5 missing entries in student solution, including: (1445, 19395) -> (1559, 19395) -> (4853, 19395) -> (9022, 19395)


    - failed on trial 1 of 250
     20
      5800 13219
     18812  1022
      2190 18406
      8234  1022
      4853 19395
      6829 13219
     19357 18406
     14429  1022
     16396  7846
     13356 13219
     15587 18406
      1445 19395
      3098 13219
      1559 19395
     17163  7846
     19518  1022
      5504  7846
      7313  7846
      3633 18406
      9022 19395

  * 10 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10837, 17966) -> (6374, 17966)
    - reference segment 7: (2344, 17966) -> (6374, 17966) -> (10837, 17966) -> (20827, 17966)

    - student   solution has 10 non-null entries
    - reference solution has 10 non-null entries
    - 8 extra entries in student solution, including: (8004, 19168) -> (12197, 19168)
    - 8 missing entries in student solution, including: (2745, 19168) -> (6638, 19168) -> (8004, 19168) -> (12197, 19168)


    - failed on trial 1 of 50

  * 15 random horizontal line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (4472, 19115) -> (1431, 19115)
    - reference segment 13: (1431, 19115) -> (1991, 19115) -> (4472, 19115) -> (9707, 19115)

    - student   solution has 15 non-null entries
    - reference solution has 15 non-null entries
    - 13 extra entries in student solution, including: (6900, 20827) -> (6196, 20827)
    - 13 missing entries in student solution, including: (3733, 20827) -> (6196, 20827) -> (6900, 20827) -> (18929, 20827)


    - failed on trial 1 of 5

==> FAILED

Test 3a: Points from a file with vertical line segments
  * filename = vertical5.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (14407, 19953) -> (14407, 17188)
    - reference segment 3: (14407, 10367) -> (14407, 17188) -> (14407, 17831) -> (14407, 19953)

    - student   solution has 5 non-null entries
    - reference solution has 5 non-null entries
    - 5 extra entries in student solution, including: (14407, 19953) -> (14407, 17188)
    - 5 missing entries in student solution, including: (14407, 10367) -> (14407, 17188) -> (14407, 17831) -> (14407, 19953)


  * filename = vertical25.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (11585, 5103) -> (11585, 4132)
    - reference segment 12: (11585, 4132) -> (11585, 5103) -> (11585, 11220) -> (11585, 12912)

    - student   solution has 25 non-null entries
    - reference solution has 25 non-null entries
    - 22 extra entries in student solution, including: (9557, 18873) -> (9557, 20238)
    - 22 missing entries in student solution, including: (19953, 10489) -> (19953, 10688) -> (19953, 19299) -> (19953, 20439)


==> FAILED

Test 3b: Random vertical line segments
  *  1 random vertical line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (14640, 13447) -> (14640, 1453)
    - reference segment 0: (14640, 1317) -> (14640, 1453) -> (14640, 3331) -> (14640, 13447)

    - student   solution has 1 non-null entries
    - reference solution has 1 non-null entries
    - 1 extra entry in student solution: (14640, 13447) -> (14640, 1453)
    - 1 missing entry in student solution: (14640, 1317) -> (14640, 1453) -> (14640, 3331) -> (14640, 13447)


    - failed on trial 1 of 500
     4
     14640 13447
     14640  1317
     14640  3331
     14640  1453

  *  5 random vertical line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (15709, 14944) -> (15709, 18805)
    - reference segment 3: (15709, 11582) -> (15709, 14944) -> (15709, 16451) -> (15709, 18805)

    - student   solution has 5 non-null entries
    - reference solution has 5 non-null entries
    - 5 extra entries in student solution, including: (15709, 14944) -> (15709, 18805)
    - 5 missing entries in student solution, including: (11910, 12268) -> (11910, 13800) -> (11910, 14138) -> (11910, 17800)


    - failed on trial 1 of 250
     20
     15709 14944
     15709 16451
     15709 11582
     11910 13800
     16004 10810
      1944  7255
      2100  7475
     11910 12268
      2100 18891
     16004  5676
     11910 17800
     15709 18805
      1944 14912
      1944  1078
     16004 11944
      2100 19115
      1944  9918
     16004 19983
     11910 14138
      2100 15812

  * 10 random vertical line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (9730, 12686) -> (9730, 14712)
    - reference segment 2: (9730, 7329) -> (9730, 7522) -> (9730, 12686) -> (9730, 14712)

    - student   solution has 10 non-null entries
    - reference solution has 10 non-null entries
    - 10 extra entries in student solution, including: (4623, 19442) -> (4623, 15748)
    - 10 missing entries in student solution, including: (4623, 13544) -> (4623, 15748) -> (4623, 19442) -> (4623, 20814)


    - failed on trial 1 of 50

  * 15 random vertical line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (14462, 6364) -> (14462, 16062)
    - reference segment 7: (14462, 1683) -> (14462, 6364) -> (14462, 8730) -> (14462, 16062)

    - student   solution has 15 non-null entries
    - reference solution has 15 non-null entries
    - 11 extra entries in student solution, including: (4479, 18463) -> (4479, 18583)
    - 11 missing entries in student solution, including: (20566, 12898) -> (20566, 13894) -> (20566, 19157) -> (20566, 19482)


    - failed on trial 1 of 5

==> FAILED

Test 4a: Points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: Random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: Points from a file with fewer than 4 points
  * filename = input1.txt
    java.lang.IllegalArgumentException: Less than 4 points.

    BruteCollinearPoints.<init>(BruteCollinearPoints.java:33)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:110)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:154)
    TestBruteCollinearPoints.test5(TestBruteCollinearPoints.java:287)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:736)

  * filename = input2.txt
    java.lang.IllegalArgumentException: Less than 4 points.

    BruteCollinearPoints.<init>(BruteCollinearPoints.java:33)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:110)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:154)
    TestBruteCollinearPoints.test5(TestBruteCollinearPoints.java:288)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:736)

  * filename = input3.txt
    java.lang.IllegalArgumentException: Less than 4 points.

    BruteCollinearPoints.<init>(BruteCollinearPoints.java:33)
    TestBruteCollinearPoints.testSegments(TestBruteCollinearPoints.java:110)
    TestBruteCollinearPoints.file(TestBruteCollinearPoints.java:154)
    TestBruteCollinearPoints.test5(TestBruteCollinearPoints.java:289)
    TestBruteCollinearPoints.main(TestBruteCollinearPoints.java:736)

==> FAILED

Test 6: Check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (10000, 0) -> (13000, 0)
    - reference segment 3: (10000, 0) -> (13000, 0) -> (20000, 0) -> (30000, 0)

    - student   solution has 4 non-null entries
    - reference solution has 4 non-null entries
    - 3 extra entries in student solution, including: (10000, 20000) -> (20000, 10000)
    - 3 missing entries in student solution, including: (30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)


  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1000, 17000) -> (1000, 28000)
    - reference segment 3: (1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)

    - student   solution has 4 non-null entries
    - reference solution has 4 non-null entries
    - 4 extra entries in student solution, including: (28000, 29000) -> (4000, 29000)
    - 4 missing entries in student solution, including: (2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)


  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (24000, 23000) -> (3000, 23000)
    - reference segment 0: (1000, 23000) -> (3000, 23000) -> (18000, 23000) -> (24000, 23000)

    - student   solution has 6 non-null entries
    - reference solution has 6 non-null entries
    - 6 extra entries in student solution, including: (9000, 26000) -> (1000, 26000)
    - 6 missing entries in student solution, including: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)


==> FAILED

Test 7: Check for fragile dependence on return value of toString()
  * filename = equidistant.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 1: (10000, 0) -> (13000, 0)
    - reference segment 3: (10000, 0) -> (13000, 0) -> (20000, 0) -> (30000, 0)

    - student   solution has 4 non-null entries
    - reference solution has 4 non-null entries
    - 3 extra entries in student solution, including: (10000, 20000) -> (20000, 10000)
    - 3 missing entries in student solution, including: (30000, 0) -> (20000, 10000) -> (10000, 20000) -> (0, 30000)


  * filename = input40.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (1000, 17000) -> (1000, 28000)
    - reference segment 3: (1000, 17000) -> (1000, 27000) -> (1000, 28000) -> (1000, 31000)

    - student   solution has 4 non-null entries
    - reference solution has 4 non-null entries
    - 4 extra entries in student solution, including: (28000, 29000) -> (4000, 29000)
    - 4 missing entries in student solution, including: (2000, 29000) -> (4000, 29000) -> (22000, 29000) -> (28000, 29000)


  * filename = input48.txt
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (24000, 23000) -> (3000, 23000)
    - reference segment 0: (1000, 23000) -> (3000, 23000) -> (18000, 23000) -> (24000, 23000)

    - student   solution has 6 non-null entries
    - reference solution has 6 non-null entries
    - 6 extra entries in student solution, including: (9000, 26000) -> (1000, 26000)
    - 6 missing entries in student solution, including: (1000, 26000) -> (9000, 26000) -> (11000, 26000) -> (18000, 26000)



It is bad style to write code that depends on the particular format of
the output from the toString() method, especially if your reason for
doing so is to circumvent the public API (which intentionally does not
provide access to the x- and y-coordinates).

==> FAILED

Test 8: Random line segments, none vertical or horizontal
  *  1 random line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10865, 9916) -> (19742, 19750)
    - reference segment 0: (9251, 8128) -> (10865, 9916) -> (17321, 17068) -> (19742, 19750)

    - student   solution has 1 non-null entries
    - reference solution has 1 non-null entries
    - 1 extra entry in student solution: (10865, 9916) -> (19742, 19750)
    - 1 missing entry in student solution: (9251, 8128) -> (10865, 9916) -> (17321, 17068) -> (19742, 19750)


    - failed on trial 1 of 500
     4
     10865  9916
      9251  8128
     17321 17068
     19742 19750

  *  5 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (10659, 10299) -> (12185, 10765)
    - reference segment 1: (8370, 9600) -> (10659, 10299) -> (12185, 10765) -> (12948, 10998)

    - student   solution has 5 non-null entries
    - reference solution has 5 non-null entries
    - 4 extra entries in student solution, including: (18418, 14864) -> (14493, 12334)
    - 4 missing entries in student solution, including: (8370, 9600) -> (10659, 10299) -> (12185, 10765) -> (12948, 10998)


    - failed on trial 1 of 250
     20
     10659 10299
      7082  4313
     12948 10998
      9873 11892
     18418 14864
      3690  8373
       299  2094
      8370  9600
      1332  7998
     17710 12425
      7428  7780
      9952 10328
      7812 10719
      3003  7982
     16848 12192
     10958  5581
     12185 10765
      5858  6768
     14493 12334
     20648  8751

  * 10 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (4940, 10880) -> (4098, 10538)
    - reference segment 2: (4098, 10538) -> (4940, 10880) -> (7466, 11906) -> (10834, 13274)

    - student   solution has 10 non-null entries
    - reference solution has 10 non-null entries
    - 9 extra entries in student solution, including: (12496, 14831) -> (14746, 19091)
    - 9 missing entries in student solution, including: (4098, 10538) -> (4940, 10880) -> (7466, 11906) -> (10834, 13274)


    - failed on trial 1 of 100

  * 15 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (3799, 6638) -> (6989, 10518)
    - reference segment 3: (3161, 5862) -> (3799, 6638) -> (6989, 10518) -> (7627, 11294)

    - student   solution has 15 non-null entries
    - reference solution has 15 non-null entries
    - 13 extra entries in student solution, including: (14660, 23645) -> (13114, 21707)
    - 13 missing entries in student solution, including: (2258, 11028) -> (4038, 11828) -> (7598, 13428) -> (8043, 13628)


    - failed on trial 1 of 50

==> FAILED

Test 9: Random line segments
  *  1 random line segment
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (7938, 3954) -> (8778, 4360)
    - reference segment 0: (7938, 3954) -> (8778, 4360) -> (9078, 4505) -> (11478, 5665)

    - student   solution has 1 non-null entries
    - reference solution has 1 non-null entries
    - 1 extra entry in student solution: (7938, 3954) -> (8778, 4360)
    - 1 missing entry in student solution: (7938, 3954) -> (8778, 4360) -> (9078, 4505) -> (11478, 5665)


    - failed on trial 1 of 500
     4
      7938  3954
      9078  4505
     11478  5665
      8778  4360

  *  5 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (12669, 12680) -> (10599, 11000)
    - reference segment 1: (8874, 9600) -> (10599, 11000) -> (11082, 11392) -> (12669, 12680)

    - student   solution has 5 non-null entries
    - reference solution has 5 non-null entries
    - 4 extra entries in student solution, including: (12669, 12680) -> (10599, 11000)
    - 4 missing entries in student solution, including: (8874, 9600) -> (10599, 11000) -> (11082, 11392) -> (12669, 12680)


    - failed on trial 1 of 250
     20
     12669 12680
     10549 13047
     11746  6057
      5143  5285
      5903  7565
     13896  9357
      3698  8395
      6217  7195
     11082 11392
     12176  6717
      8874  9600
     14498 10281
     10663 13201
      8041  9659
      7250 11275
      8434 12235
      6492  9332
      5789  7223
      5770 10075
     10599 11000

  * 10 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6259, 5643) -> (6610, 6345)
    - reference segment 8: (5960, 5045) -> (6259, 5643) -> (6610, 6345) -> (7156, 7437)

    - student   solution has 10 non-null entries
    - reference solution has 10 non-null entries
    - 8 extra entries in student solution, including: (8565, 13473) -> (3755, 13473)
    - 8 missing entries in student solution, including: (3015, 13473) -> (3755, 13473) -> (7307, 13473) -> (8565, 13473)


    - failed on trial 1 of 100

  * 15 random line segments
    - segments() contains a subsegment of a segment in reference solution
    - student   segment 0: (6911, 7204) -> (9017, 14926)
    - reference segment 11: (6587, 6016) -> (6911, 7204) -> (7856, 10669) -> (9017, 14926)

    - student   solution has 15 non-null entries
    - reference solution has 15 non-null entries
    - 12 extra entries in student solution, including: (2688, 12552) -> (6300, 12594)
    - 12 missing entries in student solution, including: (2688, 12552) -> (6300, 12594) -> (8192, 12616) -> (9138, 12627)


    - failed on trial 1 of 50

==> FAILED

Test 10: Check that data type is immutable by testing whether each method
        returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: Check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: Throws exception either if argument to constructor is null
         or if any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> 

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.